------------------------------------------------------------------------------------------
			               DATA INITIALIZATION
------------------------------------------------------------------------------------------

(1)  Set up the list of images
       imglist=setup_imglist(image_names, img_path);
       where, image_names : list of image names
        	     img_path: the path to the directory containing the images

 (2) Read annotations
       annot=read_img_annotations(image_names, imglist, annot_path);
       where, image_names: list of image names
       	      annot_path: the path to the directory containing the annotations

------------------------------------------------------------------------------------------
		                CONSTRUCTION OF POSLISTS
------------------------------------------------------------------------------------------

(1) part=sample_kposelets(annot,imglist,unit_dims,K,NUM_CANDIDATES);
       where, unit_dims: the desired aspect rations [h w], e.g. [96 64;64 64]
        	      K: numbers of parts
        	      NUM_CANDIDATES: number of candidate K-poselets

(2) [Visualization] browse_kposelets(annot,imglist,part,i);
      where, i: index into the candidates, i=1,...,NUM_CANDIDATES


------------------------------------------------------------------------------------------
                                  TRAINING EACH POSELET
------------------------------------------------------------------------------------------

(1) model = train_kposelet(part, annot, negimglist, imglist, name, kpid, index_in_part);
    part, annot, imglist are the same as above.
    negimglist is a list of negative images. 
    name serves as an identifier for a *set* of kposelets. For instance if you are training
    kposelets on PASCAL you can name it "PASCAL"
    kpid serves as an identifier for a particular kposelet in the set. During detection, the
    output will record the kpid for each detection.
    index_in_part is the index in part of the kposelet you want to train.

--------------------------------------------------------------------------------------------
                                  KEYPOINT MODELS
--------------------------------------------------------------------------------------------

(1)  kps_models = keypoint_klet(annot,part)
        where kps_models contains the keypoint model for each poselet

(2) coords = predict_keypoints(box, kps_model)


